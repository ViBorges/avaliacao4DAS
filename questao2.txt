O sistema RMI serve para providenciar de forma direta e uma simples base para computação de sistemas distribuídos orientados a objeto. Quando o cliente recebe uma referência ao um servidor, o RMI baixa um “stub” que traduz chamadas nessa referência. O “stub” serializar argumentos para o método utilizando serialização de objeto. No lado do servidor a chamada é recebida pelo sistema RMI e conectado a um “skeleton” , que é responsável por deserializa os argumentos e invocar a implementação no server do método. Quando a implementação no servidor se completa  o “skeleton” serializa e retorna uma resposta ao stub do cliente. Os stubs e os skeletons são gerados pela implementação no servidor. Essa arquitetura permite a referência determinar um comportamento da comunicação. O que se relaciona com o artigo de Becker e Spagnoli na parte de reusabilidade de componentes. Onde existe essas chamadas remotas ao servidor que quem é responsável por essas chamadas ao servidor é o stub caracterizando como um componente. Os skeletons que recebem os argumentos via stub é caracterizado como um modelo de componente onde o mesmo se comunica com o stub para retornar uma resposta.  Assim fazendo essa comunicação entre stubs e skeletons assim como a serialização(marshall e unmarshall) dos argumentos. E assim por meio de registros consegue localizar objetos via servidor, e realizar o que é feito com stub e skeleton, serializa os dados e retorna ao servidor cliente.


